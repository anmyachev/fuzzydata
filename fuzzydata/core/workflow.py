import os
import logging
from typing import Dict, List

import networkx as nx
import sqlalchemy

from fuzzydata.core.artifact import Artifact, DataFrameArtifact, SQLArtifact
from fuzzydata.core.generator import generate_schema
from fuzzydata.core.operation import Operation


logger = logging.getLogger(__name__)


class Workflow:
    """
    Class to represent a workflow in fuzzydata, Extends DiGraph from networkx with additional metadata about
    the workflow as required.
    """
    _wf_artifact_mapping = {
        'pandas': DataFrameArtifact,
        'sql': SQLArtifact
    }

    def __init__(self, name='wf', out_directory='/tmp/fuzzydata/wf/', wf_type='pandas'):
        """
        Create a new workflow with a specified name
        :param name: Name of the workflow
        :param out_directory: Output Directory for this workflow
        :param wf_type: Type of Artifacts generated by this workflow (pandas|sql)
        """

        self.name = name
        self.graph = nx.DiGraph()
        self.out_dir = out_directory
        self.artifact_dir = f"{self.out_dir}/artifacts/"
        os.makedirs(self.artifact_dir, exist_ok=True)
        self.artifact_list = []
        self.artifact_dict = {}
        self.artifact_class = self._wf_artifact_mapping[wf_type]
        logger.info(f'Creating new Workflow {self.name}')

        # Hack for SQL-based workflows - refactor for cleaner interface.
        if wf_type == 'sql':
            self.sql_engine = sqlalchemy.create_engine(f"sqlite:///{self.out_dir}/{self.name}.db")

    def generate_next_label(self):
        return f"artifact_{len(self)}"

    def initialize_new_artifact(self, label=None, filename=None):
        if not filename:
            filename = f"{self.artifact_dir}/{label}.csv"
        if not label:
            label = self.generate_next_label()
        if self.artifact_class == SQLArtifact:
            return SQLArtifact(label, filename=filename, sql_engine=self.sql_engine)
        else:
            return DataFrameArtifact(label, filename=filename)

    def add_artifact(self, artifact: Artifact, from_artifacts: List[Artifact] = None, operation: Operation = None) -> None:
        """
        Add a new artifact to the workflow with label and dataframe.
        Optionally add source label and edge information
        :param artifact: The artifact to be added
        :param from_artifacts: (optional) Source artifacts from which this new artifact was derived
        :param operation: Operation used to derive this new artifact
        """
        self.graph.add_node(artifact.label,
                            **{
                                'schema_map': artifact.schema_map,
                                'file_format': artifact.file_format,
                                'filename': artifact.filename
                            })
        v = artifact.label

        self.artifact_list.append(artifact.label)
        self.artifact_dict[artifact.label] = artifact

        if from_artifacts:
            for u in from_artifacts:
                self.graph.add_edge(u.label, v, **{
                    'operation': operation.op,
                    'args': operation.args
                })

    def generate_base_artifact(self, num_rows=100, num_cols=10, column_maps=None, label: str = None) -> None:
        """
        Create a base artifact of with given rows and columns
        :param num_rows: number of rows to be generated
        :param num_cols: number of columns to be generated
        :param column_maps: (optional) schema map for the table to be generated
        :param label: (optional) custom label for the artifact to be generated
        :return:
        """
        if not column_maps:
            column_maps = generate_schema(num_cols)

        new_artifact = self.initialize_new_artifact(label=label)
        new_artifact.generate(num_rows, column_maps)
        self.add_artifact(new_artifact)

    def generate_artifact_from_operation(self, artifacts: List[Artifact], op: str, args: Dict) -> None:
        """
        Generate a new artifact with source artifacts apply operation op with args parameters.
        :param artifacts: list of source artifacts for the operation to be applied.
        :param op: string label of the operation to be applied.
        :param args: dict containing all the parameters to be passed to the operation function.
        :return:
        """
        operation = Operation(sources=artifacts, new_label=self.generate_next_label(), op=op, args=args)
        new_artifact = operation.execute()
        self.add_artifact(new_artifact, from_artifacts=artifacts, operation=operation)

    def __len__(self):
        return len(self.artifact_list)

    def __getitem__(self, item):
        return self.artifact_dict[item]
